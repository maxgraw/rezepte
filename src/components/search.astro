---
const { class: className, ...rest } = Astro.props;
---

<div id="search_container" class={`search ${className}`} {...rest}>
    <form action="">
        <svg
            xmlns="http://www.w3.org/2000/svg"
            width="15"
            height="15"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
            class="search_icon"
            ><circle cx="11" cy="11" r="8"></circle><path d="m21 21-4.3-4.3"
            ></path></svg
        >
        <input id="search" type="search" placeholder="Suche ..." />
        <button id="clear" class="clear">
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="15"
                height="15"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="clear_icon"
                ><path d="M18 6 6 18"></path><path d="m6 6 12 12"></path></svg
            >
        </button>
    </form>
    <ul class="result" id="result"></ul>
</div>

<script is:inline>
    let pagefind;

    const search_input = document.getElementById("search");
    const result_output = document.getElementById("result");
    const clear_button = document.getElementById("clear");

    search_input.addEventListener("focus", async (e) => {
        if (!pagefind) {
            pagefind = await import("/pagefind/pagefind.js");
            await pagefind.options({
                ranking: {
                    pageLength: 0.5,
                },
            });
            pagefind.init();
        }
    });

    search_input.addEventListener("input", async (e) => {
        const data = await pagefind.debouncedSearch(e.target.value);

        if (data === null) {
            return;
        }

        clear_button.style.opacity = 1
        result_output.innerHTML = "";

        if (e.target.value == "") {
            clear_button.style.opacity = 0
            result_output.innerHTML = "";
            return;
        }

        for (const result of data.results) {
            const data = await result.data();

            const li = document.createElement("li");
            const link = document.createElement("a");

            const url = data.url.replace(".html", "");

            link.setAttribute("href", url);
            link.innerHTML = data.meta.title;

            li.appendChild(link);
            result_output.appendChild(li);
        }
    });

    clear_button.addEventListener("click", (e) => {
        e.preventDefault();
        search_input.value = "";
        result_output.innerHTML = "";
        clear_button.style.opacity = 0
    });
</script>

<style>
    .search  {
        position: relative;
    }

    .search form {
        display: flex;
        align-items: center;
        background-color: white;
        justify-content: flex-start;
        gap: 1rem;
        width: 100%;
        border-radius: var(--radius);
        border: solid 1px var(--border);
        padding-block: var(--size-1);
        padding-inline: var(--size-2);
    }

    .search form:focus-within {
        outline: solid var(--focus);
    }

    .search input {
        flex: 1;
        font-size: 1rem;
        border: none;
        width: 100%;
    }

    .search input:focus-within {
        outline: none;
    }

    .search input::placeholder {
        font-size: 1rem;
    }

    .search .clear {
        margin-inline-start: auto;
    }

    .result {
        display: none;
        position: absolute;
        background-color: white;
        border-radius: var(--radius);
        padding-inline: var(--size-2);
        padding-block: var(--size-2);
        border: solid 1px var(--border);
        width: 100%;
        flex-direction: column;
        gap: var(--size-3);

        margin-block-start: var(--size-2);
    }

    .result:has(li) {
        display: flex;
    }

    .result :global(li) {
        position: relative;
    }

    .result :global(li:hover) {
        text-decoration: underline;
    }

    .result :global(a::before) {
        content: "";
        position: absolute;
        inset: 0;
    }

    .clear {
        opacity: 0;
        padding: var(--size-2);
    }

    .clear:hover {
        background-color: var(--focus);
        border-radius: var(--radius);
    }

    #mobile_button {
        display: none;
        padding: var(--size-1);
    }

    @media only screen and (max-width: 500px) {
        .result {
            position: relative;
            background-color: transparent;
            border-radius: var(--radius);
            padding-inline: var(--size-2);
            padding-block: var(--size-2);
            border: none;
            width: 100%;
            flex-direction: column;
            gap: var(--size-3);
        }
    }
</style>
